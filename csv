| **Function**              | **Purpose**                                                       | **Example Code**                                                                                       |
|---------------------------|--------------------------------------------------                |--------------------------------------------------------------------------------------------------------|
| **`pd.read_csv()`**        | Reads a CSV file and returns a DataFrame.                          | `df = pd.read_csv('file.csv')`                                                                         |
| **`pd.read_excel()`**      | Reads an Excel file and returns a DataFrame.                      | `df = pd.read_excel('file.xlsx')`                                                                       |
| **`pd.DataFrame()`**       | Creates a DataFrame from a dictionary, list, or numpy array.       | `df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})`                                                   |
| **`pd.Series()`**          | Creates a Pandas Series from a list or array.                     | `s = pd.Series([1, 2, 3, 4])`                                                                           |
| **`.head()`**              | Returns the first n rows (default is 5).                         | `df.head()`                                                                                             |
| **`.tail()`**              | Returns the last n rows (default is 5).                          | `df.tail()`                                                                                             |
| **`.shape`**               | Returns the number of rows and columns (tuple).                   | `df.shape`  # (rows, columns)                                                                            |
| **`.info()`**              | Provides a concise summary of the DataFrame.                       | `df.info()`                                                                                             |
| **`.describe()`**          | Generates descriptive statistics (count, mean, std, etc.).         | `df.describe()`                                                                                         |
| **`.drop()`**              | Removes specified rows or columns from DataFrame.                   | `df.drop('column_name', axis=1)`  # Drop a column                                                      |
| **`.rename()`**            | Renames columns or indices.                                         | `df.rename(columns={'old_name': 'new_name'}, inplace=True)`                                            |
| **`.fillna()`**            | Fills missing values (NaN) with a specified value.                     | `df.fillna(0)`                                                                                         |
| **`.dropna()`**            | Removes missing values (rows or columns).                        | `df.dropna()`                                                                                          |
| **`.apply()`**             | Applies a function along an axis (rows or columns).                   | `df['column_name'].apply(lambda x: x * 2)`                                                             |
| **`.map()`**               | Maps values of a Series to another set of values. |                   `df['column_name'] = df['column_name'].map({'old': 'new'})`                                            |
| **`.groupby()`**           | Groups data based on a column(s) for aggregation.                 | `df.groupby('column_name').sum()`                                                                      |
| **`.agg()`**               | Applies multiple aggregation functions.                              | `df.groupby('column_name').agg({'column1': 'sum', 'column2': 'mean'})`                                |
| **`.pivot_table()`**       | Creates a pivot table for summarizing data.                  | `df.pivot_table(values='value_column', index='row_column', columns='column_column', aggfunc='sum')`    |
| **`.sort_values()`**       | Sorts a DataFrame by values in one or more columns.                     | `df.sort_values(by='column_name', ascending=False)`                                                     |
| **`.sort_index()`**        | Sorts a DataFrame by index (row labels).                                 | `df.sort_index()`                                                                                      |
| **`.query()`**             | Filters data based on a query string.                                  | `df.query('column_name > 10')`                                                                          |
| **`.filter()`**            | Filters columns or rows based on conditions.                            | `df.filter(items=['col1', 'col2'])`                                                                    |
| **`pd.to_datetime()`**     | Converts a column to datetime format.                                   | `df['date_column'] = pd.to_datetime(df['date_column'])`                                                |
| **`.dt`**                  | Accessor for datetime properties (year, month, day, etc.).               | `df['date_column'].dt.year`                                                                            |
| **`.merge()`**             | Merges two DataFrames based on common columns or indices.             | `pd.merge(df1, df2, on='key_column')`                                                                  |
| **`pd.concat()`**          | Concatenates DataFrames along rows or columns.                       | `pd.concat([df1, df2], axis=0)`                                                                        |
| **`.to_csv()`**            | Writes a DataFrame to a CSV file.                                | `df.to_csv('output.csv', index=False)`                                                                 |
| **`.to_excel()`**          | Writes a DataFrame to an Excel file.                                | `df.to_excel('output.xlsx', index=False)`                                                              |
| **`.astype()`**            | Converts a column to a specified data type.                  | `df['column_name'] = df['column_name'].astype(float)`                                                   |
| **`.pivot()`**             | Reshapes the data (like pivot tables in Excel).                 | `df.pivot(index='column1', columns='column2', values='column3')`                                       |
| **`.duplicated()`**        | Identifies duplicate rows in the DataFrame.                      | `df.duplicated()`                                                                                     |
| **`.drop_duplicates()`**   | Removes duplicate rows from the DataFrame.                     | `df.drop_duplicates()`                                                                                 |
